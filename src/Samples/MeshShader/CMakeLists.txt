###################################################################################################
#####                                                                                         #####
#####             LiteFX.Samples.MeshShader - Contains the mesh shaders sample.               #####
#####                                                                                         #####
###################################################################################################

PROJECT(LiteFX.Samples.MeshShader VERSION ${LITEFX_VERSION} LANGUAGES CXX)
MESSAGE(STATUS "Initializing: ${PROJECT_NAME}...")

IF(NOT LITEFX_BUILD_WITH_GLM)
    MESSAGE(FATAL_ERROR "This sample requires the glm converters for the math module. Set the LITEFX_BUILD_WITH_GLM option to ON and retry.")
ENDIF(NOT LITEFX_BUILD_WITH_GLM)

# Resolve package dependencies.
FIND_PACKAGE(glfw3 CONFIG REQUIRED)
FIND_PACKAGE(CLI11 CONFIG REQUIRED)
FIND_PATH(RENDERDOC_INCLUDE_DIR "renderdoc_app.h")

IF(NOT RENDERDOC_INCLUDE_DIR AND LITEFX_BUILD_EXAMPLES_RENDERDOC_LOADER)
    MESSAGE(WARNING "RenderDoc is not installed on the system. Loader will not be created.")
    SET(LITEFX_BUILD_EXAMPLES_RENDERDOC_LOADER OFF CACHE BOOL "" FORCE)
ENDIF(NOT RENDERDOC_INCLUDE_DIR AND LITEFX_BUILD_EXAMPLES_RENDERDOC_LOADER)

CONFIGURE_FILE("../config.tmpl" "${CMAKE_CURRENT_BINARY_DIR}/src/config.h")

# Collect header & source files.
SET(SAMPLE_MESH_SHADER_HEADERS
    "src/sample.h"
)

SET(SAMPLE_MESH_SHADER_SOURCES
    "src/main.cpp"
    "src/sample.cpp"
)

# Add shared library project.
ADD_EXECUTABLE(${PROJECT_NAME} 
    ${SAMPLE_MESH_SHADER_HEADERS}
    ${SAMPLE_MESH_SHADER_SOURCES}
    "${CMAKE_CURRENT_BINARY_DIR}/src/config.h"
)

# Create source groups for better code organization.
SOURCE_GROUP(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SAMPLE_MESH_SHADER_HEADERS} ${SAMPLE_MESH_SHADER_SOURCES})

# Setup project properties.
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
    FOLDER "Samples"
    VERSION ${LITEFX_VERSION}
    SOVERSION ${LITEFX_YEAR}
)

# Setup target include directories.
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/src/")

IF(LITEFX_BUILD_EXAMPLES_RENDERDOC_LOADER)
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE ${RENDERDOC_INCLUDE_DIR})
ENDIF(LITEFX_BUILD_EXAMPLES_RENDERDOC_LOADER)

# Link project dependencies.
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE LiteFX.Core LiteFX.Math LiteFX.AppModel LiteFX.Rendering glfw CLI11::CLI11)

IF(LITEFX_BUILD_VULKAN_BACKEND)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE LiteFX.Backends.Vulkan)
    
    ADD_SHADER_MODULE(${PROJECT_NAME}.Vk.Shaders.TS SOURCE "shaders/mesh_shader_ts.hlsl" LANGUAGE HLSL TYPE TASK     COMPILE_AS SPIRV SHADER_MODEL ${LITEFX_BUILD_HLSL_SHADER_MODEL} COMPILER DXC)
    ADD_SHADER_MODULE(${PROJECT_NAME}.Vk.Shaders.MS SOURCE "shaders/mesh_shader_ms.hlsl" LANGUAGE HLSL TYPE MESH     COMPILE_AS SPIRV SHADER_MODEL ${LITEFX_BUILD_HLSL_SHADER_MODEL} COMPILER DXC)
    ADD_SHADER_MODULE(${PROJECT_NAME}.Vk.Shaders.FS SOURCE "shaders/mesh_shader_fs.hlsl" LANGUAGE HLSL TYPE FRAGMENT COMPILE_AS SPIRV SHADER_MODEL ${LITEFX_BUILD_HLSL_SHADER_MODEL} COMPILER DXC)
    SET_TARGET_PROPERTIES(${PROJECT_NAME}.Vk.Shaders.TS PROPERTIES FOLDER "Samples/Shaders/Vulkan")
    SET_TARGET_PROPERTIES(${PROJECT_NAME}.Vk.Shaders.MS PROPERTIES FOLDER "Samples/Shaders/Vulkan")
    SET_TARGET_PROPERTIES(${PROJECT_NAME}.Vk.Shaders.FS PROPERTIES FOLDER "Samples/Shaders/Vulkan")
    
    TARGET_LINK_SHADERS(${PROJECT_NAME} 
        INSTALL_DESTINATION "${CMAKE_INSTALL_BINARY_DIR}/${SHADER_DEFAULT_SUBDIR}"
        SHADERS ${PROJECT_NAME}.Vk.Shaders.TS ${PROJECT_NAME}.Vk.Shaders.MS ${PROJECT_NAME}.Vk.Shaders.FS
    )
ENDIF(LITEFX_BUILD_VULKAN_BACKEND)

IF(LITEFX_BUILD_DIRECTX_12_BACKEND)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE LiteFX.Backends.DirectX12)
    
    ADD_SHADER_MODULE(${PROJECT_NAME}.Dx.Shaders.AS SOURCE "shaders/mesh_shader_ts.hlsl" LANGUAGE HLSL TYPE AMPLIFICATION COMPILE_AS DXIL SHADER_MODEL ${LITEFX_BUILD_HLSL_SHADER_MODEL} COMPILER DXC)
    ADD_SHADER_MODULE(${PROJECT_NAME}.Dx.Shaders.MS SOURCE "shaders/mesh_shader_ms.hlsl" LANGUAGE HLSL TYPE MESH          COMPILE_AS DXIL SHADER_MODEL ${LITEFX_BUILD_HLSL_SHADER_MODEL} COMPILER DXC)
    ADD_SHADER_MODULE(${PROJECT_NAME}.Dx.Shaders.PS SOURCE "shaders/mesh_shader_fs.hlsl" LANGUAGE HLSL TYPE PIXEL         COMPILE_AS DXIL SHADER_MODEL ${LITEFX_BUILD_HLSL_SHADER_MODEL} COMPILER DXC)
    SET_TARGET_PROPERTIES(${PROJECT_NAME}.Dx.Shaders.AS PROPERTIES FOLDER "Samples/Shaders/DirectX 12")
    SET_TARGET_PROPERTIES(${PROJECT_NAME}.Dx.Shaders.MS PROPERTIES FOLDER "Samples/Shaders/DirectX 12")
    SET_TARGET_PROPERTIES(${PROJECT_NAME}.Dx.Shaders.PS PROPERTIES FOLDER "Samples/Shaders/DirectX 12")

    TARGET_LINK_SHADERS(${PROJECT_NAME} 
        INSTALL_DESTINATION "${CMAKE_INSTALL_BINARY_DIR}/${SHADER_DEFAULT_SUBDIR}"
        SHADERS ${PROJECT_NAME}.Dx.Shaders.AS ${PROJECT_NAME}.Dx.Shaders.MS ${PROJECT_NAME}.Dx.Shaders.PS
    )
ENDIF(LITEFX_BUILD_DIRECTX_12_BACKEND)

# Re-use pre-compiled core header.
IF(LITEFX_BUILD_PRECOMPILED_HEADERS)
    TARGET_PRECOMPILE_HEADERS(${PROJECT_NAME} REUSE_FROM LiteFX.Core)
ENDIF(LITEFX_BUILD_PRECOMPILED_HEADERS)

# Setup installer.
INSTALL(TARGETS ${PROJECT_NAME} EXPORT LiteFXSamples
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBRARY_DIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBRARY_DIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINARY_DIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDE_DIR}
)

# Export config.
INSTALL(EXPORT LiteFXSamples DESTINATION ${CMAKE_INSTALL_EXPORT_DIR})
EXPORT(TARGETS ${PROJECT_NAME} FILE LiteFXSamplesMeshShaderConfig.cmake)