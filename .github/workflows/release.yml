# Copyright (c) 2023 Carsten Rudolph
name: Publish Release

on:
  workflow_dispatch:
    inputs:
      major:
        description: 'Major Version'
        required: true
      minor:
        description: 'Minor Version'
        required: true
      build:
        description: 'Build Number'
        required: true
      releaseLog:
        description: 'Location of the Release Log file.'
        required: true

env:
  vulkanSdkVersion: '1.4.328.1'
  llvmVersion: '19.1.7'

jobs:
  build:
    name: Build ${{ matrix.profile }}
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        profile: [ windows-msvc-x64, windows-msvc-x86, windows-clang-x64 ]
        include:
          - profile: windows-msvc-x64
            triplet: x64-windows
            compiler: msvc
            architecture: x64
            artifact: win_x64_msvc
          - profile: windows-msvc-x86
            triplet: x86-windows
            compiler: msvc
            architecture: x86
            artifact: win_x86_msvc
          - profile: windows-clang-x64
            triplet: x64-windows
            compiler: clang
            architecture: x64
            artifact: win_x64_clang
            
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}-rel
      VCPKG_FEATURE_FLAGS: 'manifests'

    steps:
      - name: Setup Vulkan SDK 
        uses: jakoch/install-vulkan-sdk-action@v1.0.4
        with:
          vulkan_version: ${{ env.vulkanSdkVersion }}
          install_runtime: true
          cache: true
          stripdown: false
       
      - name: Setup build environment
        id: setup-environment
        run: |
          cp "C:\VulkanSDK\${{ env.vulkanSdkVersion }}\runtime\x64\vulkan-1.dll" "C:\Windows\System32\vulkan-1.dll"
          cp "C:\VulkanSDK\${{ env.vulkanSdkVersion }}\runtime\x86\vulkan-1.dll" "C:\Windows\SysWOW64\vulkan-1.dll"
          
      - name: Update LLVM
        if: ${{ matrix.compiler == 'clang' }}
        uses: KyleMayes/install-llvm-action@v2.0.6
        with:
          version: ${{ env.llvmVersion }}
          
      - name: Checking out sources
        uses: actions/checkout@master
        with:
          submodules: true

      - name: Update version
        working-directory: "${{ github.workspace }}"
        shell: powershell
        run: ".\\write-version.ps1 -major ${{ github.event.inputs.major }} -minor ${{ github.event.inputs.minor }} -build ${{ github.event.inputs.build }}"

      - name: Retrieve latest CMake build
        uses: lukka/get-cmake@latest

      - name: Restore or build vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/src/Modules/vcpkg'
          vcpkgJsonGlob: '**/src/vcpkg.json'
          
      - name: Build with CMake and Ninja (Release)
        id: build-with-cmake-release
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/src/CMakeLists.txt'
          configurePreset: '${{ matrix.profile }}-release'
          buildPreset: '${{ matrix.profile }}-release'

      - name: Install with CMake (Release)
        run: |
          Set-Location '${{ github.workspace }}/out/build/${{ matrix.profile }}-release'
          cmake --install .
          
      #- name: Sign binaries
      #  uses: dlemstra/code-sign-action@v1
      #  with:
      #    certificate: '${{ secrets.SIGN_CERTIFICATE_BASE64 }}'
      #    password: '${{ secrets.SIGN_CERTIFICATE_PASSWORD }}'
      #    folder: '${{ github.workspace }}/out/install/'
      #    recursive: true

      - name: Upload install artifacts
        uses: actions/upload-artifact@v4
        with:
          name: LiteFX_${{ matrix.artifact }}
          path: '${{ github.workspace }}/out/install/${{ matrix.profile }}-release'
          if-no-files-found: error 
          
  publish:
    name: 'Publish'
    needs: build
    runs-on: ubuntu-latest
      
    steps:
      - name: Download windows-msvc-x64 artifacts...
        uses: actions/download-artifact@v4
        with:
          name: LiteFX_win_x64_msvc
          path: ${{ github.workspace }}/../.artifacts/msvc/x64/
          
      - name: Download windows-msvc-x86 artifacts...
        uses: actions/download-artifact@v4
        with:
          name: LiteFX_win_x64_msvc
          path: ${{ github.workspace }}/../.artifacts/msvc/x86/
          
      - name: Download windows-clang-x64 artifacts...
        uses: actions/download-artifact@v4
        with:
          name: LiteFX_win_x64_clang
          path: ${{ github.workspace }}/../.artifacts/clang/x64/

      - run: |
         ls -R ${{ github.workspace }}/../.artifacts/

      - name: Installing zip
        uses: montudor/action-zip@v1

      - run: zip -r ${{ github.workspace }}/../windows-x64-msvc.zip .
        working-directory: ${{ github.workspace }}/../.artifacts/msvc/x64/

      - run: zip -r ${{ github.workspace }}/../windows-x86-msvc.zip .
        working-directory: ${{ github.workspace }}/../.artifacts/msvc/x86/

      - run: zip -r ${{ github.workspace }}/../windows-x64-clang.zip .
        working-directory: ${{ github.workspace }}/../.artifacts/clang/x64/

      - run: |
         ls ${{ github.workspace }}/../*.zip

      # For debug purposes
      - uses: actions/upload-artifact@v4
        with:
          name: windows-x64-msvc.zip
          path: ${{ github.workspace }}/windows-x64-msvc.zip
          
      - uses: actions/upload-artifact@v4
        with:
          name: windows-x86-msvc.zip
          path: ${{ github.workspace }}/windows-x86-msvc.zip
          
      - uses: actions/upload-artifact@v4
        with:
          name: windows-x64-clang.zip
          path: ${{ github.workspace }}/windows-x64-clang.zip
          
      - run: |
         ls ${{ github.workspace }}/../*.zip

      # Build documentation.
      - name: Checking out sources
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.RELEASE_BOT_PAT }}

      - name: Update version
        working-directory: ${{ github.workspace }}
        run: |
          #sudo apt-get update
          #sudo apt-get install -y wget apt-transport-https software-properties-common
          #wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb
          #sudo dpkg -i packages-microsoft-prod.deb
          #sudo apt-get update
          #sudo apt-get install -y powershell
          pwsh -File .\\write-version.ps1 -major ${{ github.event.inputs.major }} -minor ${{ github.event.inputs.minor }} -build ${{ github.event.inputs.build }}

      - name: Build documentation
        uses: mattnotmitt/doxygen-action@v1
        with:
          working-directory: .
          doxyfile-path: ./.doxyfile

      - run: |
         ls ${{ github.workspace }}/../*.zip

      - name: Collect changes and push commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:    
          commit_user_name: Release Bot 🤖
          commit_user_email: 18394207+github-actions[bot]@users.noreply.github.com
          commit_message: Release ${{ github.event.inputs.major }}.${{ github.event.inputs.minor }}.${{ github.event.inputs.build }} 🚀
          status_options: --untracked-files=all
          add_options: --ignore-removal
          #push_options: --force
          skip_dirty_check: true
          skip_fetch: true
          disable_globbing: true
          tagging_message: 'v${{ github.event.inputs.major }}.${{ github.event.inputs.minor }}.${{ github.event.inputs.build }}'
          
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
            artifacts: ${{ github.workspace }}/../*.zip
            token: ${{ secrets.RELEASE_BOT_PAT }}
            bodyFile: "${{ github.workspace }}/${{ github.event.inputs.releaseLog }}"
            name: "v${{ github.event.inputs.major }}.${{ github.event.inputs.minor }}.${{ github.event.inputs.build }}"
            tag: "v${{ github.event.inputs.major }}.${{ github.event.inputs.minor }}.${{ github.event.inputs.build }}"
